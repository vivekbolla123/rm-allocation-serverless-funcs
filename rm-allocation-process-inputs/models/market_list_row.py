from Constants import *


class MarketListRow:

    def __init__(self, currParams):
        self.origin = currParams.get("Origin", CONST_NA)
        self.destin = currParams.get("Destin", CONST_NA)
        self.flight_number = currParams.get("FlightNumber", CONST_NA)
        self.per_start = currParams.get("PerStart", CONST_NA)
        self.per_end = currParams.get("PerEnd", CONST_NA)
        self.dow = currParams.get("DOW", CONST_NA)
        self.hardanchor = currParams.get("hardAnchor", CONST_NA)
        self.plfthreshold = currParams.get("plfthreshold", CONST_NA)
        self.time_window_start = currParams.get("TimeWindowStart", CONST_NA)
        self.time_window_end = currParams.get("TimeWindowEnd", CONST_NA)
        self.curve_id = currParams.get("CurveID", CONST_NA)
        self.carr_exclusion_b2c = currParams.get("CarrExlusionB2C", CONST_NA)
        self.carr_exclusion_b2b = currParams.get("CarrExlusionB2B", CONST_NA)
        self.flightExclusionB2C = currParams.get("flightExclusionB2C", CONST_NA)
        self.flightExclusionB2B = currParams.get("flightExclusionB2B", CONST_NA)
        self.fare_anchor = currParams.get("fareAnchor", CONST_NA)
        self.fare_offset = currParams.get("fareOffset", CONST_NA)
        self.first_rbd_alloc = currParams.get("FirstRBDAlloc", CONST_NA)
        self.other_rbd_alloc = currParams.get("OtherRBDAlloc", CONST_NA)
        self.b2b_backstop = currParams.get("B2BBackstop", CONST_NA)
        self.b2c_backstop = currParams.get("B2CBackstop", CONST_NA)
        self.b2b_factor = currParams.get("B2BFactor", CONST_NA)
        self.obSeats = currParams.get("obSeats", CONST_NA)
        self.obFare = currParams.get("obFare", CONST_NA)
        self.skipping_factor = currParams.get("SkippingFactor", CONST_NA)
        self.day_span = currParams.get("DaySpan", CONST_NA)
        self.auto_time_range_flag = currParams.get("AutoTimeRangeFlag", CONST_NA)
        self.analyst_name = currParams.get("analystName", CONST_NA)
        self.opening_fares = currParams.get("openingFares", CONST_NA)
        self.over_booking = currParams.get("OverBooking", CONST_NA)
        self.profileFares = currParams.get("profileFares", CONST_NA)
        self.rbdPushFlag = currParams.get("rbdPushFlag", CONST_NA)
        self.b2c_tolerance = currParams.get("B2CTolerance", CONST_NA)
        self.b2b_tolerance = currParams.get("B2BTolerance", CONST_NA)
        self.distressInventoryFlag = currParams.get("distressInventoryFlag", CONST_NA)
        self.seriesBlock = currParams.get("seriesBlock", CONST_NA)
        self.autoGroup = currParams.get("autoGroup", CONST_NA)
        self.autoBackstopFlag = currParams.get("autoBackstopFlag", CONST_NA)
        self.tbfFlag = currParams.get("tbfFlag", CONST_NA)
        self.w0Flag = currParams.get("w0_value",CONST_NA)
        
        self.run_id = currParams.get("runId", CONST_NA)
        self.update_navitaire_method = currParams.get("update_navitaire_method", CONST_NA)
        self.run_time = currParams.get("runTime", CONST_NA)
        self.navitaire_connection = currParams.get("NavitaireConnection", CONST_NA)
        self.dbconn = currParams.get("dbconn", CONST_NA)
        self.wrconn = currParams.get("wrconn", CONST_NA)
        self.sqs = currParams.get("sqs", CONST_NA)
        self.run_single_market = currParams.get("runSingleMarket", CONST_NA)
        self.s3 = currParams.get("s3", CONST_NA)
        self.cache_client = currParams.get("cache_client", CONST_NA)
        self.navitaire_update_method = currParams.get("NavitaireUpdateMethod", CONST_NA)
        self.time_logger = currParams.get("timelogger", CONST_NA)        
        self.route_type=currParams.get("route_type",CONST_NA)
        self.strategy = CONST_NA
